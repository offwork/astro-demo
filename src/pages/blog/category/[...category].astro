---
import BlogPagination from "../../../components/blog/BlogPagination.astro";
import BlogPostCard from "../../../components/blog/BlogPostCard.astro";
import HeroPosts from "../../../components/blog/HeroPosts.astro";
import { Categories, PER_PAGE_SIZE } from "../../../constants";
import BlogLayout from "../../../layouts/BlogLayout.astro";
import {
getBlogCategoryPots,
getCategoryHeroPots,
} from "../../../lib/graphql-fetch";

const { category } = Astro.params;
const catSlug = category ? category.split("/")[0] : "";
if (!Categories.map((cat) => cat.slug).includes(catSlug)) {
  return Astro.redirect("/404");
}

const pageNum =
  Number(category?.split("/")[1]) === 2
    ? PER_PAGE_SIZE
    : Number(category?.split("/")[1]) * PER_PAGE_SIZE - PER_PAGE_SIZE;

if (isNaN(pageNum) || pageNum < 0) return Astro.redirect("/404");

const postsResult = await getBlogCategoryPots(
  PER_PAGE_SIZE,
  Number(category?.split("/")[1]) === 1 ? 0 : pageNum,
  "date_ASC",
  catSlug
);
const currentPage = Number(category?.split("/")[1]);
const { aggregate } = postsResult.postsConnection;
const pages = Math.ceil(aggregate.count / PER_PAGE_SIZE);
const heroPostsResult = await getCategoryHeroPots(catSlug);
const posts = postsResult.postsConnection.edges.map((post) => post.node);
---

<BlogLayout title="Welcome to Astro.">
  <section class="container mb-20">
    <HeroPosts heroPosts={heroPostsResult} />
    <div
      class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-5 gap-y-12 mt-12"
    >
      {posts.map((post) => <BlogPostCard {...post} />)}
    </div>
    {
      aggregate.count > 9 && (
        <div class="container mt-10 lg:mt-20">
          <BlogPagination
            current={currentPage}
            pages={pages}
            link={{
              href: (page) => `/blog/category/${catSlug}/${page}`,
            }}
          />
        </div>
      )
    }
  </section>
</BlogLayout>
